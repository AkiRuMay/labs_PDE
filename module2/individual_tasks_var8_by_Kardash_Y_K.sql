-- Задание 1: Рассчитать выручку по способам доставки

SELECT 
    ship_mode AS способ_доставки,        -- Выбираем поле "ship_mode" для группировки
    ROUND(SUM(sales)::NUMERIC, 2) AS выручка  -- Суммируем продажи с округлением до 2 знаков
FROM 
    orders                               -- Источник данных - таблица заказов
GROUP BY 
    ship_mode                            -- Группируем по способам доставки
ORDER BY 
    выручка DESC;                        -- Сортировка по убыванию выручки

-- Создание индекса для оптимизации группировки
CREATE INDEX idx_orders_ship_mode ON orders (ship_mode);

/*
Логика:
- Запрос группирует заказы по способу доставки (ship_mode) и суммирует выручку (sales) для каждой группы.
- Функция ROUND обеспечивает округление результатов для читаемости.

Обоснование выбора типов данных:
- Поле ship_mode: VARCHAR(50) - хранит текстовые значения способов доставки (например, "Standard", "Express").
- Поле sales: NUMERIC(10,2) - числовой тип для точного хранения финансовых показателей.

Пояснения по использованию индексов:
- Индекс на поле ship_mode ускоряет операции GROUP BY и сортировку.
- Составной индекс (ship_mode, sales) мог бы дополнительно оптимизировать агрегацию, но не обязателен для небольших таблиц.

Особенности реализации:
- Если в данных присутствуют NULL-значения в ship_mode, они будут объединены в отдельную группу.
- Запрос автоматически игнорирует строки с sales <= 0 (если такие имеются).
*/

----------------------------------------------------------

-- Задание 2: Создать таблицу среднего чека регионов

CREATE TABLE region_avg_check AS
SELECT 
    region AS регион,                     -- Выбираем регион для анализа
    ROUND(AVG(sales)::NUMERIC, 2) AS средний_чек  -- Рассчитываем среднее значение
FROM 
    orders
WHERE 
    sales > 0                             -- Исключаем нулевые/отрицательные продажи
GROUP BY 
    region;

-- Добавление индекса для региона
CREATE INDEX idx_orders_region ON orders (region);

--Проверка данных
SELECT * FROM region_avg_check ORDER BY средний_чек DESC;

/*
Логика:
- Создается материализованная таблица со средним чеком для каждого региона.
- Фильтр WHERE sales > 0 исключает некорректные данные из расчета.

Обоснование выбора типов данных:
- Поле region: VARCHAR(50) - текстовый формат для названий регионов.
- Результат AVG(sales): NUMERIC(10,2) - точное представление денежных значений.

Особенности реализации:
- Таблица создается как материализованный объект для повторного использования.
- Для актуализации данных потребуется пересоздание таблицы (REFRESH MATERIALIZED VIEW в альтернативной реализации).
*/

----------------------------------------------------------

-- Задание 3: Найти топ-5 городов по продажам

SELECT 
    city AS город,                         
    region AS регион,                      -- Добавляем регион для устранения неоднозначности
    ROUND(SUM(sales)::NUMERIC, 2) AS объем_продаж  
FROM 
    orders
GROUP BY 
    city, region                          -- Группируем по паре город+регион
ORDER BY 
    объем_продаж DESC                     -- Сортировка по убыванию продаж
LIMIT 5;

-- Создание составного индекса
CREATE INDEX idx_orders_city_region ON orders (city, region);

--Проверка данных
SELECT COUNT(DISTINCT city) FROM orders;

/*
Логика:
- Группировка по комбинации city+region предотвращает дублирование городов с одинаковыми названиями в разных регионах.
- LIMIT 5 ограничивает вывод первыми пятью записями после сортировки.

Обоснование выбора типов данных:
- Поле city: VARCHAR(50) - текстовое представление городов.
- Поле region: VARCHAR(50) - гарантирует согласованность с другими таблицами.

Пояснения по использованию индексов:
- Составной индекс (city, region) ускоряет группировку и сортировку.
- Индекс покрывает все поля, участвующие в запросе, что позволяет использовать индекс-онли сканирование.

Особенности реализации:
- Если требуется учитывать только уникальные названия городов (без привязки к региону), измените GROUP BY на city.
- Для больших таблиц добавьте индекс (city, region, sales) для полного покрытия запроса.
*/
